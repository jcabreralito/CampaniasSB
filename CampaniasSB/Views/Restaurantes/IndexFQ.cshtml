@model IList<CampaniasSB.Controllers.RestaurantesController.spTiendasCaracteristicasFQ>
@{
    ViewBag.Title = "Restaurantes";
    Layout = "~/Views/Shared/_Layout_Restaurantes.cshtml";
}

<div id="franquicias" style="visibility: visible; display: block">

    <style>
        #resFranquiciasTable th, #resFranquiciasTable td {
            white-space: nowrap;
        }

        tfoot {
            display: table-header-group !important;
        }
    </style>

    <div class="fixed-action-btn">
        <a class="btn-floating btn-sm green" title="Agregar" onclick="PopupForm('@Url.Action("AddOrEdit","Restaurantes", new { cat = 2})')">
            <i class="large material-icons">add_circle</i>
        </a>
    </div>

    <table id="resFranquiciasTable" class="table table-striped table-bordered compact nowrap" style="width:100%; text-transform: uppercase">
        <thead>
            <tr>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    RESTAURANTE
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CC
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CLASIFICACIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    REGIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CIUDAD
                </th>
                <th class="dt-body-center text-left dt-specialColorBlack">
                    DIRECCIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Activo
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Editar
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Eliminar
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Materiales
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 1).GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorYellow">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorYellow">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 2).GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorBlue">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorBlue">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 3).GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorLilac">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorLilac">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 4).GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorGreenLight">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorGreenLight">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 5).GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorBlueLight">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorBlueLight">
                    @*@item.Key.Nombre*@
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item2 in Model.GroupBy(x => new { x.TiendaId, x.Restaurante }))
            {
                <tr>
                    <td style="text-align: left !important">
                        @item2.Key.Restaurante
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.CCoFranquicia }))
                    {
                        <td align="center">
                            @item.Key.CCoFranquicia
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Clasificacion }))
                    {
                        <td align="center">
                            @item.Key.Clasificacion
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Region }))
                    {
                        <td align="center">
                            @item.Key.Region
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Ciudad }))
                    {
                        <td align="center">
                            @item.Key.Ciudad
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Direccion }))
                    {
                        <td>
                            @item.Key.Direccion
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Activo }))
                    {

                        <td class="text-center">
                            @if (@item.Key.Activo == true)
                            {
                                <label for='danger' class='btndangerCheck'>
                                    <input type='checkbox' id='danger' class='badgebox' checked='checked' disabled='disabled'>
                                    <span class='badge'>&check;</span>
                                </label>
                            }
                            else
                            {
                                <label for='danger' class='btndangerCheck'>
                                    <input type='checkbox' id='danger' class='badgebox' disabled='disabled'>
                                    <span class='badge'>&check;</span>
                                </label>
                            }
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.TiendaId }))
                    {
                        <td class="text-center">
                            <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("AddOrEdit","Restaurantes", new { id = item.Key.TiendaId })')">
                                <i class='fas fa-pencil-alt'></i>
                            </a>
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.TiendaId }))
                    {
                        <td class="text-center">
                            <a class="btn-danger btn-lg" style="background-color: transparent; cursor: pointer" onclick="Delete(@item.Key.TiendaId)">
                                <i class="fas fa-trash" style="color: #067655"></i>
                            </a>
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Activo, x.TiendaId }))
                    {
                        <td class="text-center">
                            @if (item.Key.Activo == false)
                            {
                                <a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed'>
                                    <i class='fas fa-ban' style='color: #067655'></i>
                                </a>
                            }
                            else
                            {
                                <a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick="PopupFormMat('@Url.Action("Materiales","Restaurantes", new { id = item.Key.TiendaId })')">
                                    <i class='fas fa-plus-circle'></i>
                                </a>
                            }
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 1).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCGDev","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 2).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCPDev","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 3).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCMEDev","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 4).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCMESDev","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 5).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCERDev","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>

        <tfoot>
            <tr>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*RESTAURANTE*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CC*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CLASIFICACIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*REGIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CIUDAD*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*DIRECCIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Activo*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Editar*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Eliminar*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Materiales*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 1).GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #FFDC5A !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #FFDC5A !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 2).GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #00B0F0 !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #00B0F0 !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 3).GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #BB93D0 !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #BB93D0 !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 4).GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #9CD78D !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #9CD78D !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 5).GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #AAE6FF !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #AAE6FF !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
            </tr>
        </tfoot>
    </table>
</div>

@section scripts{

    <script>

    var Popup, PopupMat, dataTable, dataTableF, dataTableS;
        $(document).ready(function () {

            dataTable = $("#resFranquiciasTable").DataTable({
            //"processing": true,
            //"serverSide": true,
            "deferRender": true,
            "order": [[1, "asc"]],
            "pagingType": "full_numbers",
            "language": {
                "emptyTable": "No hay datos, dar click en el botón <b>Agregar</b>",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sInfo": "_END_ registros",
                "sInfoEmpty": "Registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "de un total de _MAX_",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando informacíon...",
                "oPaginate": {
                    "sFirst": "<<",
                    "sLast": ">>",
                    "sNext": ">",
                    "sPrevious": "<"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                },
                "buttons": {
                    "copy": "Copiar",
                    "colvis": "Mostrar/Ocultar Columnas",
                    "pageLength": 'Mostrar registros',
                },
                select: {
                    rows: {
                        _: "%d registros seleccionados",
                        0: "",
                        1: "1 registro seleccionado"
                    }
                },
            },
            dom: 'lBfrtip',
            buttons: [
                //'pageLength',
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Características Generales">CG</strong>',
                //    hide: [11, 12, 13, 14, 15]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Producto">CP</strong>',
                //    hide: [16, 17, 18, 19, 20, 21, 22, 23]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Materiales Especiales">CME</strong>',
                //    hide: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Materiales Especiales">CMD</strong>',
                //    hide: [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Equipo">CER</strong>',
                //    hide: [57, 58, 59, 60, 61, 62],
                //    className: "dt-body-center text-center",
                //},
                {
                    extend: 'colvisGroup',
                    text: '<i class="fas fa-list" title="Mostrar Todo"></i>',
                    show: ':hidden',
                },
                {
                    extend: 'colvis',
                    columns: ':gt(1)',
                    text: '<i class="fas fa-tasks" title="Mostrar / Ocultar Columnas"></i>',
                },
                {
                    extend: 'excelHtml5',
                    title: null,
                    text: '<i class="fas fa-file-excel" title="Exportar a Excel"></i>',
                    exportOptions: {
                        orthogonal: 'export',
                        columns: "thead th:not(.noExport)",
                        //columns: ':visible',
                    },
                    //customize: function (win) {
                    //    $(win.document.body).find('table').addClass('display').css('font-size', '9px');
                    //    $(win.document.body).find('tr:nth-child(odd) td').each(function () {
                    //        $(this).css('background-color', '#D0D0D0');
                    //    });
                    //    $(win.document.body).find('h1').css('text-align', 'center');
                    //},
                    filename: 'Restaurantes',
                    autoFilter: true,
                    sheetName: 'Franquicias',
                    messageTop: null,
                    body: true,
                    footer: false,
                    //autoClose: true,
                    //customize: function (xlsx) {
                    //    var sheet = xlsx.xl.worksheets['sheet1.xml'];

                    //    // Loop over the cells in column `C`
                    //    $('row c[r^="D"]', sheet).each(function () {
                    //        // Get the value
                    //        if ($('is t', this).text() == 'CENTRO') {
                    //            $(this).attr('s', '20');
                    //        }
                    //    });
                    //},
                },
            ],
            autoWidth: true,
            fixedColumns: true,
            fixedColumns: {
                leftColumns: 2,
            },
            //initComplete: function () {
            //    this.api().columns([2, 3, 4]).every(function () {
            //        var column = this;
            //        var select = $('<select><option value="">TODOS</option></select>')
            //            .appendTo($(column.footer()))
            //            .on('change', function () {
            //                var val = $.fn.dataTable.util.escapeRegex(
            //                    $(this).val()
            //                );

            //                column
            //                    .search(val ? '^' + val + '$' : '', true, false)
            //                    .draw();
            //            });

            //        $(select).click(function (e) {
            //            e.stopPropagation();
            //        });

            //        column.data().unique().sort().each(function (d, j) {
            //            select.append('<option value="' + d + '">' + d + '</option>')
            //        });
            //    });
            //},
            stateSave: true,
            select: true,
            scrollY: true,
            scrollX: true,
            keys: false,
            'bLengthChange': true,
            'bInfo': true,
            "lengthMenu": [[-1, 15, 25, 50, 100], ["TODOS", 15, 25, 50, 100]],
        });
    });

function PopupForm(url) {
viewPage();
    var formDiv = $('<div/>');
    $.get(url)
    .done(function (response) {
        formDiv.html(response);
        Popup = formDiv.dialog({
            autoOpen: true,
            resizable: false,
            title: "RESTAURANTES FQ",
            width: 850,
            modal: true,
            closeOnEscape: false,
            closeText: "Cerrar",
            hide: { effect: "fade", duration: 550 },
            show: { effect: "fade", duration: 550 },
            close: function () {
                Popup.dialog('destroy').remove();
                hidePages();
            }
        });
    });
}

function PopupFormMat(url) {
viewPage();
    var formDiv = $('<div/>');
    $.get(url)
        .done(function (response) {
            formDiv.html(response);
            PopupMat = formDiv.dialog({
                //position: ['middle', 20],
                autoOpen: true,
                resizable: false,
                title: "MATERIALES FQ",
                width: 800,
                modal: true,
                closeOnEscape: false,
                closeText: "Cerrar",
                hide: { effect: "fade", duration: 550 },
                show: { effect: "fade", duration: 550 },
                close: function () {
                    PopupMat.dialog('destroy').remove();
                    hidePages();
                }
            });
        });
}

        function SubmitFormMat(form) {
            var formData = new FormData(form);
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: form.action,
                    data: formData,
                    contentType: false,
                    cache: false,
                    processData: false,
                    //data : $(form).serialize(),
                    success: function (data) {
                        if (data.success) {
                            PopupMat.dialog('close');
                            //dataTable.draw();

                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "success",
                                autoHide: true,
                                autoHideDelay: 2000,
                            })

                        }
                    }
                });
            }
            return false;
        }


function SubmitForm(form) {
    var formData = new FormData(form);
    $.validator.unobtrusive.parse(form);
    if ($(form).valid()) {
        $.ajax({
            type: "POST",
            url: form.action,
            data: formData,
            contentType: false,
            cache: false,
            processData: false,
            //data : $(form).serialize(),
            success: function (data) {
                if (data.success) {
                    Popup.dialog('close');
                    //dataTable.draw();

                    $.notify(data.message, {
                        globalPosition: "top center",
                        className: "success",
                        autoHide: true,
                        autoHideDelay: 2000,
                    })

                }
            }
        });
    }
    return false;
        }

function Delete(id) {
    Swal.fire({
        title: '¿ Eliminar Restaurante ?',
        //text: "You won't be able to revert this!",
        //icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#067655',
        cancelButtonColor: '#067655',
        confirmButtonText: 'Si',
        cancelButtonText: 'No',
    }).then((result) => {
        if (result.value) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("Delete","Restaurantes")/' + id,
            success: function (data) {
                if (data.success)
                {
                    //dataTable.draw();
                    //dataTableS.ajax.reload();

                    $.notify(data.message, {
                        globalPosition: "top center",
                        className: "success"
                    })
                }
            }

        });
        }
    })

}

function exportTableToExcel(tableID, filename = '') {
    var downloadLink;
    var dataType = 'application/octec-stream';
    //var tableSelect = dataTable;
    var tableSelect = document.getElementById(tableID);
    var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');

    // Specify file name
    filename = filename ? filename + '.xlsx' : 'excel_data.xlsx';

    // Create download link element
    downloadLink = document.createElement("a");

    document.body.appendChild(downloadLink);

    if (navigator.msSaveOrOpenBlob) {
        var blob = new Blob(['ufeff', tableHTML], {
            type: dataType
        });
        navigator.msSaveOrOpenBlob(blob, filename);
    } else {
        // Create a link to the file
        downloadLink.href = 'data:' + dataType + ', ' + tableHTML;

        // Setting the file name
        downloadLink.download = filename;

        //triggering the function
        downloadLink.click();
    }
}

    </script>
}