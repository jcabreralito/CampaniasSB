@model IList<CampaniasSB.Controllers.RestaurantesController.spTiendasCaracteristicas>
@{
    ViewBag.Title = "Restaurantes";
    Layout = "~/Views/Shared/_Layout_Restaurantes.cshtml";
}

<div id="equity" style="visibility: visible; display: block">

    <style>
        #resEquityTable th, #resEquityTable td {
            white-space: nowrap;
        }

        tfoot {
            display: table-header-group !important;
        }
    </style>

    <div class="fixed-action-btn">
        <a class="btn-floating btn-sm green" title="Agregar" onclick="PopupForm('@Url.Action("AddOrEdit","Restaurantes", new { cat = 1})')">
            <i class="large material-icons">add_circle</i>
        </a>
    </div>

    <table id="resEquityTable" class="table table-striped table-bordered compact nowrap" style="width:100%; text-transform: uppercase">
        <thead>
            <tr>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    RESTAURANTE
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CC
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CLASIFICACIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    REGIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CIUDAD
                </th>
                <th class="dt-body-center text-left dt-specialColorBlack">
                    DIRECCIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Activo
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Editar
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Eliminar
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Materiales
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 1 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorYellow">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorYellow">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 2 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorBlue">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorBlue">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 3 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorLilac">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorLilac">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 4 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorGreenLight">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorGreenLight">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 5 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorBlueLight">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorBlueLight">
                    @*@item.Key.Nombre*@
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item2 in Model.Where(x => x.Categoria == "EQUITY").GroupBy(x => new { x.TiendaId, x.Restaurante }))
            {
                <tr>
                    <td style="text-align: left !important">
                        @item2.Key.Restaurante
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.CCoFranquicia }))
                    {
                        <td align="center">
                            @item.Key.CCoFranquicia
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Clasificacion }))
                    {
                        <td align="center">
                            @item.Key.Clasificacion
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Region }))
                    {
                        <td align="center">
                            @item.Key.Region
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Ciudad }))
                    {
                        <td align="center">
                            @item.Key.Ciudad
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Direccion }))
                    {
                        <td>
                            @item.Key.Direccion
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Activo }))
                    {

                        <td class="text-center">
                            @if (@item.Key.Activo == true)
                            {
                                <label for='danger' class='btndangerCheck'>
                                    <input type='checkbox' id='danger' class='badgebox' checked='checked' disabled='disabled'>
                                    <span class='badge'>&check;</span>
                                </label>
                            }
                            else
                            {
                                <label for='danger' class='btndangerCheck'>
                                    <input type='checkbox' id='danger' class='badgebox' disabled='disabled'>
                                    <span class='badge'>&check;</span>
                                </label>
                            }
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.TiendaId }))
                    {
                        <td class="text-center">
                            <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("AddOrEdit","Restaurantes", new { id = item.Key.TiendaId })')">
                                <i class='fas fa-pencil-alt'></i>
                            </a>
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.TiendaId }))
                    {
                        <td class="text-center">
                            <a class="btn-danger btn-lg" style="background-color: transparent; cursor: pointer" onclick="Delete(@item.Key.TiendaId)">
                                <i class="fas fa-trash" style="color: #067655"></i>
                            </a>
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Activo, x.TiendaId }))
                    {
                        <td class="text-center">
                            @if (item.Key.Activo == false)
                            {
                                <a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed'>
                                    <i class='fas fa-ban' style='color: #067655'></i>
                                </a>
                            }
                            else
                            {
                                <a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick="PopupFormMat('@Url.Action("Materiales","Restaurantes", new { id = item.Key.TiendaId })')">
                                    <i class='fas fa-plus-circle'></i>
                                </a>
                            }
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 1).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCG","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 2).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCP","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 3).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCME","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 4).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCMES","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 5).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCER","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>

        <tfoot>
            <tr>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*RESTAURANTE*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CC*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CLASIFICACIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*REGIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CIUDAD*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*DIRECCIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Activo*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Editar*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Eliminar*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Materiales*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 1 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #FFDC5A !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #FFDC5A !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 2 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #00B0F0 !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #00B0F0 !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 3 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #BB93D0 !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #BB93D0 !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 4 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #9CD78D !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #9CD78D !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 5 && x.Categoria == "EQUITY").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #AAE6FF !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #AAE6FF !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
            </tr>
        </tfoot>
    </table>
</div>

<div id="franquicias" style="visibility: hidden; display: none">

    <style>
        #resFranquiciasTable th, #resFranquiciasTable td {
            white-space: nowrap;
        }
    </style>

    <div class="fixed-action-btn">
        <a class="btn-floating btn-sm green" title="Agregar" onclick="PopupForm('@Url.Action(" AddOrEdit","Restaurantes", new { cat=2})')">
            <i class="large material-icons">add_circle</i>
        </a>
    </div>

    <table id="resFranquiciasTable" class="table table-striped table-bordered compact nowrap" style="width:100%; text-transform: uppercase">
        <thead>
            <tr>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    RESTAURANTE
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CC
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CLASIFICACIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    REGIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    CIUDAD
                </th>
                <th class="dt-body-center text-left dt-specialColorBlack">
                    DIRECCIÓN
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Activo
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Editar
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Eliminar
                </th>
                <th class="dt-body-center text-center dt-specialColorBlack">
                    Materiales
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 1 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorYellow">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorYellow">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 2 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorBlue">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorBlue">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 3 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorLilac">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorLilac">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 4 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorGreenLight">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorGreenLight">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 5 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th class="dt-body-center text-center dt-specialColorBlueLight">
                        @item.Key.Nombre
                    </th>
                }
                <th class="dt-body-center text-center dt-specialColorBlueLight">
                    @*@item.Key.Nombre*@
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item2 in Model.Where(x => x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.TiendaId, x.Restaurante }))
            {
                <tr>
                    <td style="text-align: left !important">
                        @item2.Key.Restaurante
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.CCoFranquicia }))
                    {
                        <td align="center">
                            @item.Key.CCoFranquicia
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Clasificacion }))
                    {
                        <td align="center">
                            @item.Key.Clasificacion
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Region }))
                    {
                        <td align="center">
                            @item.Key.Region
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Ciudad }))
                    {
                        <td align="center">
                            @item.Key.Ciudad
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Direccion }))
                    {
                        <td>
                            @item.Key.Direccion
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Activo }))
                    {

                        <td class="text-center">
                            @if (@item.Key.Activo == true)
                            {
                                <label for='danger' class='btndangerCheck'>
                                    <input type='checkbox' id='danger' class='badgebox' checked='checked' disabled='disabled'>
                                    <span class='badge'>&check;</span>
                                </label>
                            }
                            else
                            {
                                <label for='danger' class='btndangerCheck'>
                                    <input type='checkbox' id='danger' class='badgebox' disabled='disabled'>
                                    <span class='badge'>&check;</span>
                                </label>
                            }
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.TiendaId }))
                    {
                        <td class="text-center">
                            <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("AddOrEdit","Restaurantes", new { id = item.Key.TiendaId })')">
                                <i class='fas fa-pencil-alt'></i>
                            </a>
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.TiendaId }))
                    {
                        <td class="text-center">
                            <a class="btn-danger btn-lg" style="background-color: transparent; cursor: pointer" onclick="Delete(@item.Key.TiendaId)">
                                <i class="fas fa-trash" style="color: #067655"></i>
                            </a>
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId).GroupBy(x => new { x.Restaurante, x.Activo, x.TiendaId }))
                    {
                        <td class="text-center">
                            @if (item.Key.Activo == false)
                            {
                                <a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed'>
                                    <i class='fas fa-ban' style='color: #067655'></i>
                                </a>
                            }
                            else
                            {
                                <a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick="PopupFormMat('@Url.Action("Materiales","Restaurantes", new { id = item.Key.TiendaId })')">
                                    <i class='fas fa-plus-circle'></i>
                                </a>
                            }
                        </td>
                    }
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 1).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCG","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 2).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCP","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 3).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCME","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 4).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCMES","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                    @foreach (var item in Model.Where(x => x.TiendaId == item2.Key.TiendaId && x.TipoConfiguracionId == 5).GroupBy(x => new { x.Nombre, x.Valor }))
                    {
                        <td class="text-center">
                            @item.Key.Valor
                        </td>
                    }
                    <td class="text-center">
                        <a class="btn-default btn-lg" style="background-color: transparent; cursor: pointer" onclick="PopupForm('@Url.Action("EditCER","Restaurantes", new { id = item2.Key.TiendaId })')">
                            <i class='fas fa-pencil-alt'></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>

        <tfoot>
            <tr>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*RESTAURANTE*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CC*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CLASIFICACIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*REGIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*CIUDAD*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*DIRECCIÓN*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Activo*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Editar*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Eliminar*@
                </th>
                <th style="background-color: #000 !important; text-align: center !important">
                    @*Materiales*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 1 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #FFDC5A !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #FFDC5A !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 2 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #00B0F0 !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #00B0F0 !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 3 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #BB93D0 !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #BB93D0 !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 4 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #9CD78D !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #9CD78D !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
                @foreach (var item in Model.Where(x => x.TipoConfiguracionId == 5 && x.Categoria == "FRANQUICIAS").GroupBy(x => new { x.Nombre }))
                {
                    <th style="background-color: #AAE6FF !important; color: #000 !important">
                        @*@item.Key.Nombre*@
                    </th>
                }
                <th style="background-color: #AAE6FF !important; color: #000 !important">
                    @*@item.Key.Nombre*@
                </th>
            </tr>
        </tfoot>
    </table>
</div>

<div id="stock" style="visibility: hidden; display: none">

    <style>
        #resStockTable th, #resStockTable td {
            white-space: nowrap;
        }
    </style>

    <div class="fixed-action-btn">
        <a class="btn-floating btn-sm green" title="Agregar" onclick="PopupForm('@Url.Action(" AddOrEdit","Restaurantes", new { cat=3})')">
            <i class="large material-icons">add_circle</i>
        </a>
    </div>

    <table id="resStockTable" class="table table-striped table-bordered compact nowrap" style="width:100%; text-transform: uppercase">
        <tfoot>
            <tr>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
                <th style="background-color: #000 !important">
                </th>
            </tr>
        </tfoot>
    </table>
</div>

<div id="caracteristicas" style="visibility: hidden; display: none">
    <div class="fixed-action-btn">
        <a class="btn-floating btn-sm green" title="Agregar" onclick="PopupFormRC('@Url.Action(" AddOrEdit","RestauranteCaracteristicas")')">
            <i class="large material-icons">add_circle</i>
        </a>
    </div>

    <table id="caracteristicasTable" class="table table-striped table-hover table-bordered compact" style="width:100%; text-transform: uppercase">
        <tfoot>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </tfoot>
    </table>
</div>
@section scripts{

    <script>

//===================================================BEGIN TABLE EQUITY=========================================

    var Popup, PopupMat, dataTable, dataTableF, dataTableS, dataTableRC, PopupC;
        $(document).ready(function () {

            dataTable = $("#resEquityTable").DataTable({
            //"ajax": {
            //    "url": "Restaurantes/GetDataEquity",
            //    "type": "GET",
            //    "datatype": "json",
            //},
            "serverSide": false,
            "order": [[1, "asc"]],
            "pagingType": "full_numbers",
            "language": {
                "emptyTable": "No hay datos, dar click en el botón <b>Agregar</b>",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sInfo": "_END_ registros",
                "sInfoEmpty": "Registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "de un total de _MAX_",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando informacíon...",
                "oPaginate": {
                    "sFirst": "<<",
                    "sLast": ">>",
                    "sNext": ">",
                    "sPrevious": "<"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                },
                "buttons": {
                    "copy": "Copiar",
                    "colvis": "Mostrar/Ocultar Columnas",
                    "pageLength": 'Mostrar registros',
                },
                select: {
                    rows: {
                        _: "%d registros seleccionados",
                        0: "",
                        1: "1 registro seleccionado"
                    }
                },
            },
            dom: 'lBfrtip',
            buttons: [
                //'pageLength',
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Características Generales">CG</strong>',
                //    hide: [11, 12, 13, 14, 15]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Producto">CP</strong>',
                //    hide: [16, 17, 18, 19, 20, 21, 22, 23]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Materiales Especiales">CME</strong>',
                //    hide: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Materiales Especiales">CMD</strong>',
                //    hide: [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Equipo">CER</strong>',
                //    hide: [57, 58, 59, 60, 61, 62],
                //    className: "dt-body-center text-center",
                //},
                {
                    extend: 'colvisGroup',
                    text: '<i class="fas fa-list" title="Mostrar Todo"></i>',
                    show: ':hidden',
                },
                {
                    extend: 'colvis',
                    columns: ':gt(1)',
                    text: '<i class="fas fa-tasks" title="Mostrar / Ocultar Columnas"></i>',
                },
                {
                    extend: 'excelHtml5',
                    title: null,
                    text: '<i class="fas fa-file-excel" title="Exportar a Excel"></i>',
                    exportOptions: {
                        orthogonal: 'export',
                        columns: "thead th:not(.noExport)",
                        //columns: ':visible',
                    },
                    //customize: function (win) {
                    //    $(win.document.body).find('table').addClass('display').css('font-size', '9px');
                    //    $(win.document.body).find('tr:nth-child(odd) td').each(function () {
                    //        $(this).css('background-color', '#D0D0D0');
                    //    });
                    //    $(win.document.body).find('h1').css('text-align', 'center');
                    //},
                    filename: 'Restaurantes',
                    autoFilter: true,
                    sheetName: 'Equity',
                    messageTop: null,
                    body: true,
                    footer: false,
                    //autoClose: true,
                    //customize: function (xlsx) {
                    //    var sheet = xlsx.xl.worksheets['sheet1.xml'];

                    //    // Loop over the cells in column `C`
                    //    $('row c[r^="D"]', sheet).each(function () {
                    //        // Get the value
                    //        if ($('is t', this).text() == 'CENTRO') {
                    //            $(this).attr('s', '20');
                    //        }
                    //    });
                    //},
                },
            ],
            autoWidth: true,
            fixedColumns: true,
            fixedColumns: {
                leftColumns: 2,
            },
            //initComplete: function () {
            //    this.api().columns([2, 3, 4]).every(function () {
            //        var column = this;
            //        var select = $('<select><option value="">TODOS</option></select>')
            //            .appendTo($(column.footer()))
            //            .on('change', function () {
            //                var val = $.fn.dataTable.util.escapeRegex(
            //                    $(this).val()
            //                );

            //                column
            //                    .search(val ? '^' + val + '$' : '', true, false)
            //                    .draw();
            //            });

            //        $(select).click(function (e) {
            //            e.stopPropagation();
            //        });

            //        column.data().unique().sort().each(function (d, j) {
            //            select.append('<option value="' + d + '">' + d + '</option>')
            //        });
            //    });
            //},
            stateSave: true,
            select: true,
            scrollY: true,
            scrollX: true,
            keys: false,
            'bLengthChange': true,
            'bInfo': true,
            "lengthMenu": [[-1, 15, 25, 50, 100], ["TODOS", 15, 25, 50, 100]],
        });
    });

//===================================================END TABLE EQUITY=========================================

//===================================================BEGIN TABLE FRANQUICIAS=========================================

        $(document).ready(function () {
        dataTableF = $("#resFranquiciasTable").DataTable({
            @*"ajax": {
                "url": "Restaurantes/GetDataFranquicias",
                "type": "GET",
                "datatype": "json"
            },
            "columns": [
                {
                    "data": "Restaurante", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Restaurante",
                    "className": "dt-body-center text-left dt-specialColorBlack",
                },
                {
                    "data": "CCoFranquicia", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "CC",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                { "data": "Clasificacion", "render": function (data) {
                    return "<span>" + data + "</span>";
                    },
                    "title": "Clasificación",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                {
                    "data": "Region", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Región",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                {
                    "data": "Ciudad", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Ciudad",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                {
                    "data": "Observaciones", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Observaciones",
                    "className": "dt-body-center text-left dt-specialColorBlack",
                },
                {
                    "data": "Direccion", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Dirección",
                    "className": "dt-body-center text-left dt-specialColorBlack",
                },
                {
                    data: "Activo",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<label for='danger' class='btndangerCheck'><input type='checkbox' id='danger' class='badgebox' checked='checked' disabled='disabled'><span class='badge'>&check;</span></label>";
                        } else {
                            return "<label for='danger' class='btndangerCheck'><input type='checkbox' id='danger' class='badgebox' disabled='disabled'><span class='badge'>&check;</span></label>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Activo",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "TiendaId", "render": function (data) {
                        return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupForm('@Url.Action("AddOrEdit","Restaurantes")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Editar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "TiendaId", "render": function (data) {
                        return "<a class='btn-danger btn-lg' style='background-color: transparent; cursor: pointer' onclick=Delete(" + data + ")><i class='fas fa-trash' style='color: #067655'></i></a>";
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Eliminar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "TiendaId", "render": function (data, type, row) {
                        if (row.Activo == 0) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed' ><i class='fas fa-ban' style='color: #067655'></i></a>";
                        }
                        else {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupFormMat('@Url.Action("Materiales","Restaurantes")/" + data + "')><i class='fas fa-plus-circle'></i></a>";
                        }
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Materiales",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "Tipo", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Tipo",
                    "className": "dt-body-center text-center dt-specialColorYellow",
                },
                {
                    "data": "NivelPrecio", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Nivel de Precio",
                    "className": "dt-body-center text-center dt-specialColorYellow",
                },
                {
                    data: "MenuDigital",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorYellow",
                    "title": "Menú Digital",
                    "orderable": false,
                },
                {
                    "data": "CantidadDePantallas", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Pantallas",
                    "className": "dt-body-center text-center dt-specialColorYellow",
                },
                {
                    "data": "TiendaId", "render": function (data, type, row) {
                        if (row.Activo == 0) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed' ><i class='fas fa-ban' style='color: #067655'></i></a>";
                        }
                        else {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupForm('@Url.Action("EditCG","Restaurantes")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                        }
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorYellow",
                    "title": "Editar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    data: "TerceraReceta",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlue",
                    "title": "3ERA RECETA",
                },
                {
                    data: "Arroz",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlue",
                    "title": "Arroz",
                },
                {
                    data: "Hamburguesas",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlue",
                    "title": "Hamburguesas",
                },
                {
                    data: "Ensalada",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlue",
                    "title": "Ensalada",
                },
                {
                    data: "PET2Litros",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "title": "PET DE 2 LITROS",
                    "className": "dt-body-center text-center dt-specialColorBlue",
                },
                {
                    data: "Postres",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "title": "Postres",
                    "className": "dt-body-center text-center dt-specialColorBlue",
                },
                {
                    data: "KeCono",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlue",
                    "title": "Ke-Cono",
                },
                {
                    data: "KREAMBALL",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlue",
                    "title": "KREAMBALL",
                },
                {
                    data: "BisquetMiel",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlue",
                    "title": "Bisquet",
                },
                {
                    "data": "TiendaId", "render": function (data, type, row) {
                        if (row.Activo == 0) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed' ><i class='fas fa-ban' style='color: #067655'></i></a>";
                        }
                        else {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupForm('@Url.Action("EditCP","Restaurantes")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                        }
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlue",
                    "title": "Editar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    data: "Autoexpress",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Autoexpress",
                },
                {
                    data: "AEMedidaEspecial",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "AE Medida Especial",
                },
                {
                    data: "PanelDeInnovacion",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Panel De Innovación",
                },
                {
                    data: "DisplayDeBurbuja",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Display De Burbuja",
                },
                {
                    data: "Delivery",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Delivery",
                },
                {
                    data: "DisplayDePiso",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Display De Piso",
                },
                {
                    data: "CopeteAERemodelado",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Copete AE Remodelado",
                },
                {
                    data: "CopeteAETradicional",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Copete AE Tradicional",
                },
                {
                    data: "WCNACIONAL67X100cm",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "WC NACIONAL 67X100cm",
                },
                {
                    data: "AEHolding",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "AE Holding",
                },
                {
                    data: "AECaribe",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "AE Caribe",
                },
                {
                    data: "PanelComplementosHolding",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Panel Complementos Holding",
                },
                {
                    data: "PanelComplementosHoldingMR",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "title": "PANEL DE COMPLEMENTOS HOLDING MR",
                    "visible": true,
                    "className": "dt-body-center text-center dt-specialColorLilac",
                },
                {
                    data: "PanelDeComplementosSinArrozSin3raReceta",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Panel De Complementos Sin Arroz Sin 3ra Receta",
                },
                {
                    data: "PanelALaCartaCaribe",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Panel A La Carta Caribe",
                },
                {
                    data: "PanelALaCartaCaribeSin3raReceta",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Panel A La Carta Caribe Sin 3ra Receta",
                },
                {
                    data: "PanelALaCartaHolding",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Panel A La Carta Holding",
                },
                {
                    data: "PanelALaCartaHoldingSin3raReceta",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorLilac",
                    "title": "Panel A La Carta Holding Sin 3ra Receta",
                },
                {
                    "data": "TiendaId", "render": function (data, type, row) {
                        if (row.Activo == 0) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed' ><i class='fas fa-ban' style='color: #067655'></i></a>";
                        }
                        else {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupForm('@Url.Action("EditCME","Restaurantes")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                        }
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorLilac",
                    "title": "Editar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    data: "MEDIDA_ESPECIAL_AE_ZUAZUA_51x71cm",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "title": "MEDIDA ESPECIAL AE ZUAZUA 51x71cm",
                    "visible": true,
                    "className": "dt-body-center text-center dt-specialColorGreenLight",
                },
                {
                    "data": "TiendaId", "render": function (data, type, row) {
                        if (row.Activo == 0) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed' ><i class='fas fa-ban' style='color: #067655'></i></a>";
                        }
                        else {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupForm('@Url.Action("EditCMES", "Restaurantes")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                        }
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorGreenLight",
                    "title": "Editar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "AcomodoDeCajas",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>DER</span>";
                        } else if (data == 2) {
                            return "<span>IZQ</span>";
                        } else {
                            return "<span></span>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center dt-specialColorBlueLight",
                    "title": "Ubicación Pantallas",
                },
                {
                    data: "Telefono",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<span>SI</span>";
                        } else {
                            return "<span>NO</span>";
                        }
                        return data;
                    },
                    "title": "Teléfono",
                    "visible": true,
                    "className": "dt-body-center text-center dt-specialColorBlueLight",
                },
                {
                    "data": "TiendaId", "render": function (data, type, row) {
                        if (row.Activo == 0) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed' ><i class='fas fa-ban' style='color: #067655'></i></a>";
                        }
                        else {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupForm('@Url.Action("EditCER","Restaurantes")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                        }
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlueLight",
                    "title": "Editar",
                    "orderable": false,
                    "searchable": false,
                },
            ],*@
            "serverSide": false,
            "order": [[1, "asc"]],
            "pagingType": "full_numbers",
            "language": {
                "emptyTable": "No hay datos, dar click en el botón <b>Agregar</b>",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sInfo": "_END_ registros",
                "sInfoEmpty": "Registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "de un total de _MAX_",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "<<",
                    "sLast": ">>",
                    "sNext": ">",
                    "sPrevious": "<"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                },
                "buttons": {
                    "copy": "Copiar",
                    "colvis": "Mostrar/Ocultar Columnas"
                },
                select: {
                    rows: {
                        _: "%d registros seleccionados",
                        0: "",
                        1: "1 registro seleccionado"
                    }
                },
            },
            dom: 'lBfrtip',
            buttons: [
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Características Generales">CG</strong>',
                //    hide: [11, 12, 13, 14, 15]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Producto">CP</strong>',
                //    hide: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Materiales Especiales">CME</strong>',
                //    hide: [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Medidas Especiales">CMD</strong>',
                //    hide: [45, 46],
                //},
                //{
                //    extend: 'colvisGroup',
                //    text: '<strong style="font-size: 14px; margin-left: -5px" title="Ocultar Configuración por Equipo">CER</strong>',
                //    hide: [47, 48, 49],
                //    className: "dt-body-center text-center",
                //},
                {
                    extend: 'colvisGroup',
                    text: '<i class="fas fa-list" title="Mostrar Todo"></i>',
                    show: ':hidden',
                },
                {
                    extend: 'colvis',
                    columns: ':gt(1)',
                    text: '<i class="fas fa-tasks" title="Mostrar / Ocultar Columnas"></i>',
                },
                {
                    extend: 'excelHtml5',
                    title: null,
                    text: '<i class="fas fa-file-excel" title="Exportar a Excel"></i>',
                    exportOptions: {
                        orthogonal: 'export',
                        columns: "thead th:not(.noExport)",
                    },
                    filename: 'Restaurantes',
                    autoFilter: true,
                    sheetName: 'Franquicias',
                    messageTop: null,
                    body: true,
                    footer: false,
                },
            ],
            autoWidth: true,
            fixedColumns: true,
            fixedColumns: {
                leftColumns: 2,
            },
            //initComplete: function () {
            //    this.api().columns().every(function () {
            //        var column = this;
            //        var select = $('<select><option value="">=TODOS=</option></select>')
            //            .appendTo($(column.footer()).empty())
            //            .on('change', function () {
            //                var val = $.fn.dataTable.util.escapeRegex(
            //                    $(this).val()
            //                );

            //                column
            //                    .search(val ? '^' + val + '$' : '', true, false)
            //                    .draw();
            //            });

            //        column.data().unique().sort().each(function (d, j) {
            //            select.append('<option value="' + d + '">' + d + '</option>')
            //        });
            //    });
            //},
            stateSave: true,
            select: true,
            scrollY: true,
            scrollX: true,
            keys: false,
            'bLengthChange': true,
            'bInfo': true,
            "lengthMenu": [[-1, 15, 25, 50, 100], ["TODOS", 15, 25, 50, 100]],
        });
    });

//===================================================END TABLE FRANQUICIAS=========================================

//===================================================BEGIN TABLE STOCK=========================================

        $(document).ready(function () {
        dataTableS = $("#resStockTable").DataTable({
            "ajax": {
                "url": "Restaurantes/GetDataStock",
                "type": "GET",
                "datatype": "json"
            },
            "columns": [
                {
                    "data": "Restaurante", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Restaurante",
                    "className": "dt-body-center text-left dt-specialColorBlack",
                },
                {
                    "data": "CCoFranquicia", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "CC",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                { "data": "Clasificacion", "render": function (data) {
                    return "<span>" + data + "</span>";
                    },
                    "title": "Clasificación",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                {
                    "data": "Region", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Región",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                {
                    "data": "Ciudad", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Ciudad",
                    "className": "dt-body-center text-center dt-specialColorBlack",
                },
                {
                    "data": "Observaciones", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Observaciones",
                    "className": "dt-body-center text-left dt-specialColorBlack",
                },
                {
                    "data": "Direccion", "render": function (data) {
                        return "<span>" + data + "</span>";
                    },
                    "title": "Dirección",
                    "className": "dt-body-center text-left dt-specialColorBlack",
                },
                {
                    data: "Activo",
                    render: function (data, type, row) {
                        if (data == 1) {
                            return "<label for='danger' class='btndangerCheck'><input type='checkbox' id='danger' class='badgebox' checked='checked' disabled='disabled'><span class='badge'>&check;</span></label>";
                        } else {
                            return "<label for='danger' class='btndangerCheck'><input type='checkbox' id='danger' class='badgebox' disabled='disabled'><span class='badge'>&check;</span></label>";
                        }
                        return data;
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Activo",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "TiendaId", "render": function (data) {
                        return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupForm('@Url.Action("AddOrEdit","Restaurantes")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Editar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "TiendaId", "render": function (data) {
                        return "<a class='btn-danger btn-lg' style='background-color: transparent; cursor: pointer' onclick=Delete(" + data + ")><i class='fas fa-trash' style='color: #067655'></i></a>";
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Eliminar",
                    "orderable": false,
                    "searchable": false,
                },
                {
                    "data": "TiendaId", "render": function (data, type, row) {
                        if (row.Activo == 0) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: not-allowed' ><i class='fas fa-ban' style='color: #067655'></i></a>";
                        }
                        else {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupFormMat('@Url.Action("Materiales","Restaurantes")/" + data + "')><i class='fas fa-plus-circle'></i></a>";
                        }
                    },
                    "className": "dt-body-center text-center noExport dt-specialColorBlack",
                    "title": "Materiales",
                    "orderable": false,
                    "searchable": false,
                },
            ],
            "serverSide": false,
            "order": [[1, "asc"]],
            "pagingType": "full_numbers",
            "language": {
                "emptyTable": "No hay datos, dar click en el botón <b>Agregar</b>",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sInfo": "_END_ registros",
                "sInfoEmpty": "Registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "de un total de _MAX_",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "<<",
                    "sLast": ">>",
                    "sNext": ">",
                    "sPrevious": "<"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                },
                "buttons": {
                    "copy": "Copiar",
                    "colvis": "Mostrar/Ocultar Columnas"
                },
                select: {
                    rows: {
                        _: "%d registros seleccionados",
                        0: "",
                        1: "1 registro seleccionado"
                    }
                },
            },
            dom: 'lBfrtip',
            buttons: [
                {
                    extend: 'colvis',
                    columns: ':gt(1)',
                    text: '<i class="fas fa-tasks" title="Mostrar / Ocultar Columnas"></i>',
                },
                {
                    extend: 'excelHtml5',
                    title: null,
                    text: '<i class="fas fa-file-excel" title="Exportar a Excel"></i>',
                    exportOptions: {
                        orthogonal: 'export',
                        columns: "thead th:not(.noExport)",
                    },
                    filename: 'Stock',
                    autoFilter: true,
                    sheetName: 'Stock',
                    messageTop: null,
                    body: true,
                    footer: false,
                },
            ],
            autoWidth: true,
            fixedColumns: true,
            fixedColumns: {
                leftColumns: 2,
            },
            initComplete: function () {
                this.api().columns([2, 3, 4]).every(function () {
                    var column = this;
                    var select = $('<select><option value="">=TODOS=</option></select>')
                        .appendTo($(column.footer()).empty())
                        .on('change', function () {
                            var val = $.fn.dataTable.util.escapeRegex(
                                $(this).val()
                            );

                            column
                                .search(val ? '^' + val + '$' : '', true, false)
                                .draw();
                        });

                    column.data().unique().sort().each(function (d, j) {
                        select.append('<option value="' + d + '">' + d + '</option>')
                    });
                });
            },
            stateSave: true,
            select: true,
            scrollY: true,
            scrollX: true,
            keys: false,
            'bLengthChange': true,
            'bInfo': true,
            "lengthMenu": [[-1, 15, 25, 50, 100], ["TODOS", 15, 25, 50, 100]],
        });
    });

//===================================================END TABLE STOCK=========================================

//===================================================BEGIN TABLE CARACTERISTICAS=========================================

                $(document).ready(function () {
            dataTableRC = $("#caracteristicasTable").DataTable({
                "ajax": {
                    "url": "RestauranteCaracteristicas/GetData",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    {
                        "data": "Nombre", "render": function (data) {
                            return "<span>" + data + "</span>";
                        },
                        "title": "Característica"
                    },
                    {
                        "data": "TipoConfiguracion", "render": function (data) {
                            return "<span>" + data + "</span>";
                        },
                        "title": "Categoría",
                        "className": "dt-body-center text-center",
                    },
                    {
                        "data": "EquityFranquicia", "render": function (data) {
                            return "<span>" + data + "</span>";
                        },
                        "title": "Tipo",
                        "searchable": true,
                        "className": "dt-body-center text-center",
                    },
                    {
                        "data": "TiendaConfiguracionId", "render": function (data) {
                            return "<a class='btn-default btn-lg' style='background-color: transparent; cursor: pointer' onclick=PopupFormRC('@Url.Action("AddOrEdit", "RestauranteCaracteristicas")/" + data + "')><i class='fas fa-pencil-alt'></i></a>";
                        },
                        "title": "Editar",
                        "orderable": false,
                        "searchable": false,
                        "className": "dt-body-center text-center",
                    },
                    {
                        "data": "TiendaConfiguracionId", "render": function (data) {
                            return "<a class='btn-danger btn-lg' style='background-color: transparent; cursor: pointer' onclick=DeleteRC(" + data + ")><i class='fas fa-trash' style='color: #067655'></i></a>";
                        },
                        "title": "Eliminar",
                        "orderable": false,
                        "searchable": false,
                        "className": "dt-body-center text-center",
                    },
                ],
                //"serverSide": true,
                "language": {
                    "emptyTable": "No hay datos, dar click en el botón <b>Agregar</b>",
                    "sLengthMenu": "Mostrar _MENU_ registros",
                    "sZeroRecords": "No se encontraron resultados",
                    "sInfo": "_END_ registros",
                    "sInfoEmpty": "Registros del 0 al 0 de un total de 0 registros",
                    "sInfoFiltered": "de un total de _MAX_",
                    "sInfoPostFix": "",
                    "sSearch": "Buscar:",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst": "<<",
                        "sLast": ">>",
                        "sNext": ">",
                        "sPrevious": "<"
                    },
                    "oAria": {
                        "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    },
                    "buttons": {
                        "copy": "Copiar",
                        "colvis": "Mostrar/Ocultar Columnas"
                    },
                    select: {
                        rows: {
                            _: "%d registros seleccionados",
                            0: "",
                            1: "1 registro seleccionado"
                        }
                    },
                },
                dom: 'lfrtip',
                //autoWidth: false,
                fixedColumns: true,
                fixedColumns: {
                    leftColumns: 1,
                },
                initComplete: function () {
                    this.api().columns([1, 2]).every(function () {
                        var column = this;
                        var select = $('<select><option value="">=TODOS=</option></select>')
                            .appendTo($(column.footer()).empty())
                            .on('change', function () {
                                var val = $.fn.dataTable.util.escapeRegex(
                                    $(this).val()
                                );

                                column
                                    .search(val ? '^' + val + '$' : '', true, false)
                                    .draw();
                            });

                        column.data().unique().sort().each(function (d, j) {
                            select.append('<option value="' + d + '">' + d + '</option>')
                        });
                    });
                },
                stateSave: true,
                select: true,
                scrollY: true,
                scrollX: false,
                keys: false,
                'bLengthChange': true,
                'bInfo': true,
                "lengthMenu": [[-1, 15, 25, 50, 100], ["TODOS", 15, 25, 50, 100]],
            });
        });

//===================================================END TABLE CARACTERISTICAS=========================================

        function PopupForm(url) {
            viewPage();
    var formDiv = $('<div/>');
    $.get(url)
    .done(function (response) {
        formDiv.html(response);
        Popup = formDiv.dialog({
            autoOpen: true,
            resizable: false,
            title: "RESTAURANTES",
            width: 850,
            modal: true,
            closeOnEscape: false,
            closeText: "Cerrar",
            hide: { effect: "fade", duration: 550 },
            show: { effect: "fade", duration: 550 },
            close: function () {
                Popup.dialog('destroy').remove();
                hidePages();
            }
        });
    });
}

        function PopupFormMat(url) {
            viewPage();
    var formDiv = $('<div/>');
    $.get(url)
        .done(function (response) {
            formDiv.html(response);
            PopupMat = formDiv.dialog({
                //position: ['middle', 20],
                autoOpen: true,
                resizable: false,
                title: "MATERIALES",
                width: 800,
                modal: true,
                closeOnEscape: false,
                closeText: "Cerrar",
                hide: { effect: "fade", duration: 550 },
                show: { effect: "fade", duration: 550 },
                close: function () {
                    PopupMat.dialog('destroy').remove();
                    hidePages();
                }
            });
        });
}

        function SubmitFormMat(form) {
            var formData = new FormData(form);
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: form.action,
                    data: formData,
                    contentType: false,
                    cache: false,
                    processData: false,
                    //data : $(form).serialize(),
                    success: function (data) {
                        if (data.success) {
                            PopupMat.dialog('close');
                            dataTable.draw();
                            dataTableF.draw();
                            //dataTableS.ajax.reload();

                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "success",
                                autoHide: true,
                                autoHideDelay: 2000,
                            })

                        }
                    }
                });
            }
            return false;
        }


function SubmitForm(form) {
    var formData = new FormData(form);
    $.validator.unobtrusive.parse(form);
    if ($(form).valid()) {
        $.ajax({
            type: "POST",
            url: form.action,
            data: formData,
            contentType: false,
            cache: false,
            processData: false,
            //data : $(form).serialize(),
            success: function (data) {
                if (data.success) {
                    Popup.dialog('close');
                    dataTable.reload();
                    dataTableF.reload();
                    //dataTableS.ajax.reload();

                    $.notify(data.message, {
                        globalPosition: "top center",
                        className: "success",
                        autoHide: true,
                        autoHideDelay: 2000,
                    })

                }
            }
        });
    }
    return false;
        }

function Delete(id) {
    Swal.fire({
        title: '¿ Eliminar Restaurante ?',
        //text: "You won't be able to revert this!",
        //icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#067655',
        cancelButtonColor: '#067655',
        confirmButtonText: 'Si',
        cancelButtonText: 'No',
    }).then((result) => {
        if (result.value) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("Delete","Restaurantes")/' + id,
            success: function (data) {
                if (data.success)
                {
                    dataTable.draw();
                    dataTableF.draw();
                    //dataTableS.ajax.reload();

                    $.notify(data.message, {
                        globalPosition: "top center",
                        className: "success"
                    })
                }
            }

        });
        }
    })

}

        function PopupFormRC(url) {
            viewPage();
            var formDiv = $('<div/>');
            $.get(url)
                .done(function (response) {
                    formDiv.html(response);
                    PopupC = formDiv.dialog({
                        autoOpen: true,
                        resizable: false,
                        title: 'CARACTERÍSTICAS',
                        width: 700,
                        modal: true,
                        closeOnEscape: false,
                        closeText: "Cerrar",
                        hide: { effect: "fade", duration: 550 },
                        show: { effect: "fade", duration: 550 },
                        close: function () {
                            PopupC.dialog('destroy').remove();
                            hidePages();
                        }
                    });
                });
        }


                function SubmitFormRC(form) {
            $.validator.unobtrusive.parse(form);
            if($(form).valid()){
                $.ajax({
                    type : "POST",
                    url : form.action,
                    data : $(form).serialize(),
                    success : function (data) {
                        if(data.success)
                        {
                            PopupRC.dialog('close');
                            dataTableRC.ajax.reload();

                            $.notify(data.message,{
                                globalPosition :"top center",
                                className: "success",
                                autoHide: true,
                                autoHideDelay: 2000,
                            })

                        }
                    }
                });
            }
            return false;
        }

        function DeleteRC(id) {
            Swal.fire({
                title: '¿ Eliminar Característica ?',
                //text: "You won't be able to revert this!",
                //icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#067655',
                cancelButtonColor: '#067655',
                confirmButtonText: 'Si',
                cancelButtonText: 'No',
            }).then((result) => {
                if (result.value) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Delete", "RestauranteCaracteristicas")/' + id,
                    success: function (data) {
                        if (data.success)
                        {
                            dataTableRC.ajax.reload();

                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "success"
                            })

                        }
                    }

                });
                }
            })

        }

function exportTableToExcel(tableID, filename = '') {
    var downloadLink;
    var dataType = 'application/octec-stream';
    //var tableSelect = dataTable;
    var tableSelect = document.getElementById(tableID);
    var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');

    // Specify file name
    filename = filename ? filename + '.xlsx' : 'excel_data.xlsx';

    // Create download link element
    downloadLink = document.createElement("a");

    document.body.appendChild(downloadLink);

    if (navigator.msSaveOrOpenBlob) {
        var blob = new Blob(['ufeff', tableHTML], {
            type: dataType
        });
        navigator.msSaveOrOpenBlob(blob, filename);
    } else {
        // Create a link to the file
        downloadLink.href = 'data:' + dataType + ', ' + tableHTML;

        // Setting the file name
        downloadLink.download = filename;

        //triggering the function
        downloadLink.click();
    }
}

    </script>
}